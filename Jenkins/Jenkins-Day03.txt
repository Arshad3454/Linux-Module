_____________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________
___________________________________________________DAY 03__________________________________________________________
_____________________________________________________________________________________________________________________

1. GitHub - WebHooks
2. Integration of private github repo with Jenkins job using PAT
3. Integration of private github repo with Jenkins job using SSH Keys and SSH URL
4. Upstream and downstream jobs 
5. Jenkins Pipeline - Introduction
6. Jenkins Pipeline Job(s)


GITHUB WEBHOOKS
-------------------------------------
=> It will trigger the build the moment we commit the changes in the code repository

=> It is an advanced option for POLL-SCM

Integration of Private Repo. with Jenkins job
---------------------------------------------------------
Repo types: 
Public - No authentication is required
Private - Authentication is required
	1. Personal Access Token (PAT)
	2. SSH Keys

Note: Create a private repo with maven web app.

PAT
-------
1. Create a PAT in github with required permissions
2. Create credentials in jenkins job

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

SSH Keys
-----------------
1. Create an SSH Key
2. Add SSH Public key in github
3. Create credentials with SSH Private key in jenkins job

--------------------
Pipelines
--------------------
=> In jenkins, we can create 2 types of jobs; 1) Freestyle project (GUI) 2) Pipeline (Script/Code)
=> It is also called as PaaC 
=> Pipeline is a sequential execution of jobs.
=> Pipelines are used to create complex jobs
=> Pipelines can be created in 2 ways
	1. Scripted Pipeline
	2. Declarative Pipeline
=> Scripted Pipeline:
	Here we will write the pipeline scripts using Python or Groovy
	Code knowledge is required
=> Declarative Pipeline
	Easiest approach
	Code knowledge is not required
=> Jenkins file - It is a file where we keep the pipeline script
=> jenkins file will be a part of project repo
=> Syntax: jenkinsfile (or) Jenkinsfile
=> In pipelines we will have multiple stages and hence it is also called as MULTI-STAGE PIPELINE

=> While writing a pipeline script, we will use a simple hello world script available in jenkins job.

=> Plugin: Pipeline

JENKINS FILE
----------------------
A Jenkinsfile is a special text file used in conjunction with Jenkins, an open-source automation server. It essentially acts as a blueprint for automating software delivery workflows, specifically following the CI/CD (Continuous Integration and Continuous Delivery) pipeline.

What does a Jenkinsfile contain?

The Jenkinsfile contains instructions written in a special language called the Jenkins Pipeline DSL (Domain-Specific Language). This DSL instructs Jenkins on the various stages involved in the software delivery process.



Declarative Pipeline
Declarative Pipeline syntax is more structured and user-friendly, making it easier to read and write. It enforces a more strict and predictable way of defining your pipelines.

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building...'
                // Add your build steps here, e.g., sh 'mvn clean install'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
                // Add your test steps here, e.g., sh 'mvn test'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying...'
                // Add your deploy steps here, e.g., sh 'scp target/*.war user@server:/path/to/deploy'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

In this example:
agent any specifies that the pipeline can run on any available agent.
stages define a sequence of stages (Build, Test, Deploy).
Each stage contains steps which are the actual commands or actions to be executed.
The post block defines actions to be taken after the pipeline execution, depending on the outcome (success or failure).


Scripted (Groovy) Pipeline
Scripted Pipeline syntax is more flexible and allows for complex script logic. It uses Groovy language features.

Example Scripted Pipeline Script:
node {
    try {
        stage('Build') {
            echo 'Building...'
            // Add your build steps here, e.g., sh 'mvn clean install'
        }

        stage('Test') {
            echo 'Testing...'
            // Add your test steps here, e.g., sh 'mvn test'
        }

        stage('Deploy') {
            echo 'Deploying...'
            // Add your deploy steps here, e.g., sh 'scp target/*.war user@server:/path/to/deploy'
        }
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        echo 'Pipeline failed: ' + e.message
    } finally {
        if (currentBuild.result == 'FAILURE') {
            echo 'Sending failure notification...'
            // Add your notification steps here, e.g., mail to: 'team@example.com', subject: 'Build failed', body: '...'
        } else {
            echo 'Pipeline completed successfully.'
        }
    }
}

In this example:
The node block designates the script to run on a Jenkins agent.
stage blocks define different phases of the pipeline (Build, Test, Deploy).
try-catch-finally blocks are used for error handling and notifications.
The currentBuild.result is used to track the status of the pipeline.

Key Differences
Syntax and Structure: Declarative Pipelines are more structured with a specific syntax, making them easier to write and read. Scripted Pipelines use Groovy scripting, offering more flexibility and control over the pipeline logic.
Error Handling: Declarative Pipelines provide built-in post blocks for handling different pipeline outcomes. Scripted Pipelines require explicit try-catch blocks for error handling.
Flexibility: Scripted Pipelines allow the use of the full range of Groovy features and are better suited for more complex scenarios. Declarative Pipelines are more limited but easier to maintain.


Steps to write a pipeline
-------------------------------------
P - pipeline
A - agent 
S - stages
S - steps

---------------------------------------
Upstream and downstream jobs
---------------------------------------
Create 3 freestyle jobs with simple shell script

Open job1 ----> Configure ----> Post build actions ----> Select 'Build other projects' ----> Projects to build: <Give the job 2 name> (Here what we are defining is, once after job 1 is executed, then jenkins should automatically execute the job2) ----> 'Check' Trigger only if build is stable





















----------------------------
PARAMETERS
----------------------------
Lets say, I have 4 war files, and each war I want to deploy into the respective environment. But, there is a chance that I might deploy the wrong war file to wrong environment. 
So, here we will use a concept called PARAMETERS.

Parameters are used to pass the inputs for the jobs.

Types of parameters:
1. Choice: 99% we will use this in real-time. Here we will select the appropriate one when we have multiple options.

Lets work with parameters:
1. Create a sample freestyle job.
2. In General tab, you can see "This project is parameterized" Check this. --- Add parameter --- Select "Choice" --- Name: envi, 
Choices: 
dev
qa
uat
prod --- Save --- Apply
3. Click on Build now --- It will ask you about this job has to be built on which envi.
4. Click on build number  ---  Parameters (Leftpane) --- You can see the parameter that you have selected while building.
5. Now if you want to build on someother envi (Lets say QA) --- Goto Job --- Build with parameters (left pane) --- select qa --- Build --- Now the war file will build on qa envi. --- Click on build number --- parameters (left pane) --- You can see qa parameter.

How to delete parameters?

Goto the job --- General --- Click on the X mark under parameters --- Save --- Apply

Note: You can build a job for multiple parameters.

2. String: To pass multiple inputes at a time. In real-time we will not use this

3. Multiline String: To pass multiple inputs in multiple lines.

4. Boolean: True or False type. This is used when we want to take back-up of builds

5. File: To build files. To take the files from local to server. This is also used to see the files in jenkins.